{"version":3,"sources":["Light.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Light","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","e","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","tblboard","src_Light_0","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAqBeA,qBAjBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFLA,2EAKNU,GACRP,KAAKJ,MAAMY,qDAIX,IAAIC,EAAU,QAAUT,KAAKJ,MAAMc,MAAQ,YAAc,IACzD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAASf,KAAKI,qBAb9BY,cCCdC,qBAOF,SAAAA,EAAYrB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACdpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KAEDsB,MAAQ,CACTC,QAAQ,EACRC,MAAOvB,EAAKwB,eALFxB,6EAWd,IADA,IAAIuB,EAAQ,GACJE,EAAI,EAAGA,EAAItB,KAAKJ,MAAM2B,MAAOD,IAAI,CAErC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAIzB,KAAKJ,MAAM8B,MAAOD,IACjCD,EAAIG,KAAKC,KAAKC,SAAW7B,KAAKJ,MAAMkC,qBAExCV,EAAMO,KAAKH,GAEf,OAAOJ,4CAGOW,qCAMd,IADA,IAAMC,EAAW,GACTV,EAAI,EAAGA,EAAItB,KAAKJ,MAAM2B,MAAMD,IAAI,CAEpC,IADA,IAAIE,EAAM,GACFC,EAAE,EAAEA,EAAIzB,KAAKJ,MAAM8B,MAAOD,IAC9BD,EAAIG,KAAKhB,EAAAC,EAAAC,cAACoB,EAAD,CAAOvB,MAAOV,KAAKkB,MAAME,MAAMK,GAAGH,MAEnDU,EAASL,KAAKhB,EAAAC,EAAAC,cAAA,UAAKW,IAEnB,OACIb,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACKmB,WA5CDhB,cAAdC,EACKiB,aAAe,CAClBX,MAAO,EACPG,MAAO,EACPI,oBAAqB,KA+Cdb,cC3CAkB,MARf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f4670fb.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Light.css'\n\nclass Light extends Component {\n    constructor(props){\n        super(props)\n        this.handleClick = this.handleClick.bind(this)\n    }\n    \n    handleClick(e){\n        this.props.flipCellsAroundMe()\n    }\n\n    render() {\n        let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n        return (\n            <td className={classes} onClick={this.handleClick}></td>\n        )\n    }\n}\n\nexport default Light","import React, { Component } from 'react'\nimport Light from './Light'\nimport './Board.css'\n\nclass Board extends Component {\n    static defaultProps = {\n        nrows: 5,\n        ncols: 5,\n        chanceLightStartsOn: 0.25\n    }\n    \n    constructor(props){\n        super(props)\n\n        this.state = {\n            hasWon: false,\n            board: this.createBoard()\n        }\n    }\n\n    createBoard(){\n        let board = []\n        for(let y = 0; y < this.props.nrows; y++){\n            let row = [];\n            for(let x = 0; x < this.props.ncols; x++){\n                row.push(Math.random() < this.props.chanceLightStartsOn) \n            }\n            board.push(row);\n        }\n        return board;\n    }\n\n    flipCellsAroundMe(coord){\n\n    }\n\n    render() {\n        const tblboard = [];\n        for(let y = 0; y < this.props.nrows;y++){\n            let row = []\n            for(let x=0;x < this.props.ncols; x++){\n                row.push(<Light isLit={this.state.board[x][y]} />)\n            }\n        tblboard.push(<tr>{row}</tr>)\n        }\n        return (\n            <table className=\"Board\">\n                <tbody>\n                    {tblboard}\n                </tbody>  \n            </table>\n        )\n    }\n}\n\nexport default Board","import React from 'react';\nimport Board from './Board'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}